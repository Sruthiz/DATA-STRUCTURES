 #include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

char tree[MAX_NODES] = {'\0'};
int num_nodes = 0;

void insert_root(char key) {
    if (tree[0] != '\0') {
        printf("Root already exists.\n");
        return;
    }

    tree[0] = key;
    num_nodes++;
}

void insert_left_child(char key, int parent) {
    int left_child_index = (2 * parent) + 1;

    if (parent >= num_nodes || tree[parent] == '\0') {
        printf("Parent doesn't exist.\n");
        return;
    }

    if (left_child_index >= MAX_NODES) {
        printf("Tree size exceeded. Cannot insert left child.\n");
        return;
    }

    tree[left_child_index] = key;
    num_nodes++;
}

void insert_right_child(char key, int parent) {
    int right_child_index = (2 * parent) + 2;

    if (parent >= num_nodes || tree[parent] == '\0') {
        printf("Parent doesn't exist.\n");
        return;
    }

    if (right_child_index >= MAX_NODES) {
        printf("Tree size exceeded. Cannot insert right child.\n");
        return;
    }

    tree[right_child_index] = key;
    num_nodes++;
}

void print_tree() {
    printf("Binary tree: ");
    for (int i = 0; i < num_nodes; i++) {
        if (tree[i] == '\0') {
            printf("-");
        } else {
            printf("%c", tree[i]);
        }
    }
    printf("\n");
}

int main() {
    char key;
    int parent;
    char choice;

    do {
        printf("Choose an option:\n");
        printf("1. Insert root node\n");
        printf("2. Insert left child\n");
        printf("3. Insert right child\n");
        printf("4. Print tree\n");
        printf("5. Exit\n");

        scanf(" %c", &choice);

        switch(choice) {
            case '1':
                printf("Enter root node value: ");
                scanf(" %c", &key);
                insert_root(key);
                break;
            case '2':
                printf("Enter left child value: ");
                scanf(" %c", &key);
                printf("Enter parent node index: ");
                scanf("%d", &parent);
                insert_left_child(key, parent);
                break;
            case '3':
                printf("Enter right child value: ");
                scanf(" %c", &key);
                printf("Enter parent node index: ");
                scanf("%d", &parent);
                insert_right_child(key, parent);
                break;
            case '4':
                print_tree();
                break;
            case '5':
                exit(0);
            default:
                printf("Invalid choice. Please choose again.\n");
                break;
        }
    } while (choice != '5');

    return 0;
}

